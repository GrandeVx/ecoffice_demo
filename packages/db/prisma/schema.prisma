// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model city {
  id   String @id @unique
  name String

  calendars         calendar[]
  secondHandProduct secondHandProduct[]
  user              user[]
  SupportRequest    SupportRequest[]

  // da definire un ulteriore tabella per i recapiti.
  whatsappNumber String? // momentanemente stringa, da definire un tipo pi√π appropriato 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabella di join per la relazione molti-a-molti
model calendar {
  id         String              @id @unique @default(uuid())
  day        Weekday
  cityId     String
  city       city                @relation(fields: [cityId], references: [id])
  wasteTypes CalendarWasteType[] // Modifica per relazione molti-a-molti

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model wasteType {
  id        String              @id @unique @default(uuid())
  name      String
  color     String
  calendars CalendarWasteType[] // Modifica per relazione molti-a-molti

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabella di join per la relazione molti-a-molti
model CalendarWasteType {
  calendarId  String
  calendar    calendar  @relation(fields: [calendarId], references: [id])
  wasteTypeId String
  wasteType   wasteType @relation(fields: [wasteTypeId], references: [id])

  @@id([calendarId, wasteTypeId])
}

model secondHandProduct {
  id String @id @unique

  name        String
  description String
  price       Float
  images      String[] // array of image urls

  city   city   @relation(fields: [cityId], references: [id])
  cityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

enum Role {
  user
  admin
}

model user {
  id    String  @id @unique @default(uuid())
  email String  @unique
  phone String? @unique

  role      Role
  firstName String?
  lastName  String?
  city      city?   @relation(fields: [cityId], references: [id])
  cityId    String?
  address   String?

  reports        report[] // Array di Segnalazioni
  pickup         pickup[] // Array di Ritiri a Domicilio
  SupportRequest SupportRequest[]

  SignInCompleted Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([id])
}

// Segnalazione
model report {
  id String @id @unique

  address String
  type    String
  status  String
  images  String[] // array of image urls

  user   user   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

// Ritiro a Domilicio
model pickup {
  id String @id @unique

  address String
  status  String
  images  String[] // array of image urls

  user   user   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

// Richiesta di Supporto
model SupportRequest {
  id       String           @id @unique
  status   String // Stati possibili: "open", "closed"
  userId   String
  user     user             @relation(fields: [userId], references: [id])
  cityId   String
  city     city             @relation(fields: [cityId], references: [id])
  messages SupportMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Messaggi di Supporto
model SupportMessage {
  id               String         @id @unique
  content          String
  supportRequestId String
  supportRequest   SupportRequest @relation(fields: [supportRequestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
